#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 14 16:56:46 2017

"""
""" 
3.2 How would you design a stack which, in addition to push and pop, 
    also has a function min which returns the minimum element? Push, pop and 
    min should all operate in 0(1) time.
"""

class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []       

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        curMin = self.getMin()
        if curMin == None or curMin > x:
            curMin = x
        self.stack.append((x, curMin))        

    def pop(self):
        """
        :rtype: void
        """
        self.stack.pop()   

    def top(self):
        """
        :rtype: int
        """
        if len(self.stack) == 0:
            return None
        else:
            return self.stack[len(self.stack) - 1][0]

    def getMin(self):
        """
        :rtype: int
        """
        if len(self.stack) == 0:
            return None
        else:
            return self.stack[len(self.stack) - 1][1]

""" 
3.4 In the classic problem of the Towers of Hanoi, you have 3 towers and N 
    disks of different sizes which can slide onto any tower. The puzzle starts 
    with disks sorted in ascending order of size from top to bottom (i.e., each
    disk sits on top of an even larger one). Youhave the following constraints:
    (1) Only one disk can be moved at a time.
    (2) A disk is slid off the top of one tower onto the next rod.
    (3) A disk can only be placed on top of a larger disk.
    Write a program to move the disks from the first tower to the last using 
    Stacks.
"""

def hanoi(n, source, target, helper):
    """ 
    n should not be zero to be moved from source tower to target tower. 
        n-1 disks could be moved from source tower to helper tower, and then
        the largest disk is moved from source to target, and then the n-1 disks
        could be moved from helper tower to target tower with source tower as
        helper. 
     """
    if n > 0:
        hanoi(n-1, source, helper, target)
        print("move disk from", source, "to", target)
        hanoi(n-1, helper, target, source)
        
""" 
3.5 Implement a MyQueue class which implements a queue using two stacks. 
"""

class Myqueue(object):
    def _int_(self):
        """Initilize data structure """
        self.stack1 = []
        self.stack2 = []
    
    def push(self, x):
        """ Push element x to the back of queue.
        :type x: int
        :rtype: void 
        """
        self.stack1.append(x)
    
    def pop(self):
        """Removes the element from in front of queue and returns that element.
        :rtype: int
        """
        if len(self.stack2) != 0:
            self.stack2.pop()
        else:
            while len(self.stack2) != 0:
                self.stack2.append(self.stack1.pop())
                self.stack2.pop()
        
    def peek(self):
        """ Get the front element.
        :rtype: int
        """
        if len(self.stack2) != 0:
            return self.stack2[-1]
        else:
            while len(self.stack1) != 0:
                self.stack2.append(self.stack1.pop())
                return self.stack2[-1]
    
    def empty(self):
        """ Returns whether the queue is empty.
        :rtype: bool
        """
        return len(self.stack1) == 0 and len(self.stack2) == 0

""" 
3.6 Write a program to sort a stack in ascending order (with biggest items 
    on top). You may use at most one additional stack to hold items, but you 
    may not copy the elements into any other data structure (such as an array).
    The stack supports the following operations: push, pop, peek, and isEmpty.
"""

def sortStack(stack):
    original = stack
    other = stack()
    """ Use an additional stack to store ordered elements """
    other.push(original.pop())
    """ store smaller elements at the bottom of other stack recursively """
    while not original.isEmpty():
        elem = original.pop()
        moved = 0
        while other.peek() > elem:
            original.push(other.pop())
            """ push bigger elements back to original stack """
            moved += 1
        other.push(elem)
        for _ in range(moved):
            other.push(original.pop())
        """ push back all the bigger elements popped from other stack """
    return other

""" 
3.7 An animal shelter holds only dogs and cats, and operates on a strictly
    "first in, first out" basis. People must adopt either the "oldest" (based 
    on arrival time) of all animals at the shelter, or they can select whether 
    they would prefer a dog or a cat (and will receive the oldest animal of 
    that type). They cannot select which specific animal they would like. 
    Create the data structures to maintain this system and implement operations
    such as enqueue, dequeueAny, dequeueDog and dequeueCat. You may use the 
    built-in L inked List data structure.
"""
    
from collections import deque

class AnimalShelter(object):
    """ use two queues """
    def _int_(self):
        self.cats = deque([])
        self.dogs = deque([])
        self.order = 0
        
    def enqueue(self, name, type):
        if type == 'cat':
            self.cats.append((name, self.order))
            self,order += 1
        elif type == 'dog':
            self.dogs,append((name, self.order))
            self.order += 1
            
    def dequequeCat(self):
        if self.cats:
            cat = self.cats.popleft()
        return cat[0]
    
    def dequeueDog(self):
        if self.dogs:
            dog = self.dogs.popleft()
        return dog[0]
    
    def dequeueAny(self):
        if not self.cats and not self.dogs:
            return None
        if not self.cats:
            dog = self.dogs.popleft()
        return dog[0]
        if not self.dogs:
            cat = self.cats.poplet()
            return cat[0]
        """ find the first pair(name, order) in each queue """
        cat = self.cats[0]
        dog = self.dogs[0] 
        """ 
        compare the orders of cats and dogs, the animal with smaller order 
        will be adoped first
        """
        if cat[1] > dog[1]:
            dog = self.dogs.popleft()
            return dog[0]
        else:
            cat = self.cats.popleft()
            return cat[0]
        
        
        
            
    